# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# change window focus within space
# alt - u : yabai -m window --focus south || yabai -m window --focus north
# alt - i : yabai -m window --focus north || yabai -m window --focus south
alt - p : yabai -m window --focus west || yabai -m window --focus east
alt - n : yabai -m window --focus east || yabai -m window --focus west

#change focus between external displays (left and right)
# shift + alt - a: yabai -m display --focus west || yabai -m display --focus east
# shift+ alt - f: yabai -m display --focus east || yabai -m display --focus west

# rotate layout clockwise
shift + alt - r : yabai -m space --rotate 270

# flip along y-axis
shift + alt - y : yabai -m space --mirror y-axis

# flip along x-axis
shift + alt - x : yabai -m space --mirror x-axis

# toggle window float
shift + alt - t : yabai -m window --toggle float --grid 4:4:1:1:2:2

# focused window first 2/3 of monitor 
shift + alt - f : yabai -m window --grid 1:3:0:0:2:1 
# maximize a window

shift + alt - m : yabai -m window --toggle zoom-fullscreen

# switch space 1 and 6
shift + alt - s: yabai -m space 1 --label main; yabai -m space 6 --label secondary; yabai -m space --focus last; yabai -m space --create; yabai -m space --focus last; yabai -m space --label temp; yabai -m space --focus main; while yabai -m window --space temp; do :; done; yabai -m space --focus secondary; while yabai -m window --space main; do :; done; yabai -m space --focus temp; while yabai -m window --space secondary; do :; done; yabai -m space --destroy; yabai -m space --focus main
# balance out tree of windows (resize to occupy same area)
shift + alt - e : yabai -m space --balance

# swap windows
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north
shift + alt - h : yabai -m window --swap west
shift + alt - l : yabai -m window --swap east

# move window and split
ctrl + alt - j : yabai -m window --warp south
ctrl + alt - k : yabai -m window --warp north
ctrl + alt - h : yabai -m window --warp west
ctrl + alt - l : yabai -m window --warp east

# move window to display left and right
# shift + alt - s : yabai -m window --display west; yabai -m display --focus west;
# shift + alt - g : yabai -m window --display east; yabai -m display --focus east;

#move window to prev and next space
shift + alt - p : yabai -m window --space prev;
shift + alt - n : yabai -m window --space next;

# move to space or else create space here
ctrl - 1 : yabai -m space --focus 1 || yabai -m space --focus 6
ctrl - 2 : yabai -m space --focus 2 || yabai -m space --focus 7
ctrl - 3 : yabai -m space --focus 3 || yabai -m space --focus 5
ctrl - 4 : yabai -m space --focus 4 || yabai -m space --focus 8
ctrl + cmd - 1 : yabai -m space --focus 6 || yabai -m space --focus 1
ctrl + cmd - 2 : yabai -m space --focus 7 || yabai -m space --focus 2
ctrl + cmd - 3 : yabai -m space --focus 5 || yabai -m space --focus 3
ctrl + cmd - 4 : yabai -m space --focus 8 || yabai -m space --focus 4



#: move window to space #
cmd + alt - 1 : yabai -m window --space 1;
cmd + alt - 2 : yabai -m window --space 2;
cmd + alt - 3 : yabai -m window --space 3;
cmd + alt - 4 : yabai -m window --space 4;
cmd + alt - 5 : yabai -m window --space 5;
cmd + alt - 6 : yabai -m window --space 6;
cmd + alt - 7 : yabai -m window --space 7;
cmd + alt - 8 : yabai -m window --space 8;

# stop/start/restart yabai
ctrl + alt - q : yabai --stop-service
ctrl + alt - s : yabai --start-service
ctrl + alt - r : yabai --restart-service;
ctrl + alt - g : yabai -m space --focus 1; yabai -m space 5 --display 2 ; yabai -m space 6 --display 3 ; yabai -m space 7 --display 3
